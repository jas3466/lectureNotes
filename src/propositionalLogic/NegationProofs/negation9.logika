//(negation9.logika)

//Hint: start with LEM

//Can we do it without LEM...just straight pbc?


//This version does not use LEM
p → q ⊢ ¬p ∨ q
{
    1. p -> q           premise
    2. {
        3. !(!p V q)    assume

        4. {
            5. !p       assume
            6. !p V q   Vi1 5
            7. _|_      !e 6 3
            //want contradiction
        }
        8. p            pbc 4
        9. q            ->e 1 8
        10. !p V q      Vi2 9
        11. _|_         !e 10 3
        //if I had p, could get q from premise
        //then could use Vi to get !p V q, and get _|_

        //want: contradiction
    }
    12. !p V q           pbc 2
    //afterwards, use pbc to get !p V q
}

//This version of the proof uses LEM
/*
p → q ⊢ ¬p ∨ q
{
    //paste in the LEM proof
    1. {
        2. !(p V !p)            assume

        //prove !p
        3. {
            4. p                assume
            5. p V !p           Vi1 4
            6. _|_              !e 5 2
            //want contradiction
        }
        7. !p                   !i 3
        8. p V !p               Vi2 7
        9. _|_                  !e 8 2
        //use !i    to conclude !p

        //need: p V !p to get contradiction
        //if I had just p or just !p
        //could use Vi to get p V !p

        //want: contradiction
    }
    10. p V !p                  pbc 1

    11. p -> q                   premise
    12. {
        13. p                   assume
        14. q                   ->e 11 13
        15. !p V q              Vi2 14
    }
    16. {
        17. !p                  assume
        18. !p V q              Vi1 17
    }
    19. !p V q                  Ve 10 12 16
}
*/