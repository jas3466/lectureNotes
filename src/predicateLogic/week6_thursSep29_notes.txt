HW 5 due before midnight tonight

HW 6 will be posted later today
- will involve more translations and some
    predicate logic proofs

/////////////////////////////////

Today:

- order of operations
- a couple more translations
- intro to predicate logic proofs

/////////////////////////////////

Order of operations with quantifiers

()
quantifiers/negation
^
V
->

...BUT, Logika places quantifiers last in order of
operations. Best to use () to be clear.

/////////////////////////////////

A couple of more translation examples.

Domain: cookies

CC(x): cookie x contains chocolate chips
N(x): cookie x contains nuts
T(x, y): cookie x tastes better than cookie y


No cookie with just nuts and no chocolate chips tastes
    better than a cookie with both nuts and chocolate chips.

(how can we express "no cookie"?)

there does not exist a cookie ....

it's not the case that there exists a cookie ...

!(E x (N(x) ^ !CC(x) ^ (E y (N(y) ^ CC(y) ^ T(x, y)))))





////////////////////////////////

We want to translate the following statements:

Only 5th graders won prizes.

Every 5th grader won a prize.

Every prize was won by a 5th grader.

No 5th grader won a prize.

Not every 5th grader won a prize.




What is our domain? What predicates should we use?

Domain: students
Predicate:

in5th(x): student x is in 5th grade
wonPrize(x): student x won a prize


Only 5th graders won prizes.

!(E x (!is5th(x) ^ wonPrize(x)))
A x (wonPrize(x) -> is5th(x))

Every 5th grader won a prize.

A x (is5th(x) -> wonPrize(x))
!(E x (is5th(x) ^ !wonPrize(x)))

Every prize was won by a 5th grader.
(same as "only 5th graders won prizes")

No 5th grader won a prize.

!(E x (is5th(x) ^ wonPrize(x)))

A x (wonPrize(x) -> !is5th(x))

Not every 5th grader won a prize.

(not every = at least one 5th grader didn't win a prize)

E x (is5th(x) ^ !wonPrize(x))
!(A x (is5th(x) -> wonPrize(x)))


/////////////////////////////////

For-all elimination (∀e):

       ∀x P(x)
∀e: --------------
       P(v)

//...for some specific individual v



Idea:

- if we know that a statement is true for ALL individuals in
our domain

...then what would we know about a specific individual
in that domain?




/////////////////////////////////

Example:

(forall1.logika)

A x Human(x) |- Human(Socrates)





...and then:

(forall2.logika)

A x (Human(x)->Mortal(x)), Human(Socrates) |- Mortal(Socrates)





/////////////////////////////////

For-all introduction (∀i):

       { a
        ... P(a) }
∀i: --------------
       ∀x P(x)

//a is a "fresh" individual (never used before)


Idea:

- We know a statement holds for some arbitrary individual
- That individual could have been anything!

...what can we say about that statement for all individuals?




Structure involves a subproof:

4. {
    5. a            //no justification here, could be any (fresh) individual name
    ...
    10. P(a)        //or some combination statement with our individual, a
}
11. A x P(x)        Ai 4


//////////////////////

Examples:

(forall3.logika)
A n isStudent(n), A n canProgram(n) |-
                            A n (isStudent(n) ^ canProgram(n))


(forall4.logika)
A x P(x) |- A y P(y)


(forall5.logika)
A x (P(x) -> Q(x) V K(x)), A y P(y) |- A n (Q(n) V K(n))

///////////////////////////////////////

Combining translations and proofs

Given:

All kids like ice cream or broccoli.
No kids like broccoli. (i.e., all kids don't like broccoli)

Want to prove: All kids like ice cream.


Proof: forall6.logika

/////////////////////////////////

(edit: we'll do this proof on Tuesday, October 4)

Given:

Everyone wearing a red shirt likes pizza.
Everyone who likes pizza likes donuts.
No one likes donuts.

Want to prove: No one is wearing a red shirt.


Proof: forall7.logika

////////////////////////////////

Next: proofs rules with the existential quantifier