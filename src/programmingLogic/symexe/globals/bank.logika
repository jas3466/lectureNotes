//Tues Dec 6

import org.sireum.logika._

//global variables
var balance: Z = 0
var elite: B = false
val eliteMin: Z = 1000000 //$1M is the minimum balance for elite status

//global invariants
l"""{
    invariant
        //balance should be non-negative
        balance >= 0

        //elite status should reflect if balance is at least a million
        elite == (balance >= eliteMin)
}"""

def deposit(amount: Z): Unit = {
    l"""{
        //COMPLETE THE FUNCTION CONTRACT
        requires amount >= 0
        modifies balance, elite
        ensures
            balance == balance_in + amount

        //list impact of function on global variables
    }"""

    //what *could* we list as premises here?
    //global invariants, preconditions

    balance = balance + amount
    if (balance >= eliteMin) {
        elite = true
    } else {
        elite = false
    }

    //if we were in manual mode, would need to explicitly prove
    //each global invariant and postcondition

    //in symexe mode, Logika must be able to deduce these things
}

def withdraw(amount: Z): Unit = {
    l"""{
        //COMPLETE THE FUNCTION CONTRACT
        requires amount <= balance
        modifies balance, elite
        ensures
            balance == balance_in - amount
    }"""

    balance = balance - amount
    if (balance >= eliteMin) {
        elite = true
    } else {
        elite = false
    }
}

/////// Client code ///////////

//this can be checked automatically in symexe mode, but this is the kind of thing
//we need to be able to show before each function call:
//1) global invariants hold
//2) precondition for function holds



// what if we set balance to -500?
//balance = -500    -->no! global invariant doesn't hold

deposit(500000)

//after each function call, we know:
//1) the postconditions are true
//2) the global invariants are true






//what can we assert here?
assert(balance == 500000 & elite == false)



deposit(500000)

assert(balance == 1000000 & elite == true)

//what can we assert here?



//withdraw 2000000? (problem?)