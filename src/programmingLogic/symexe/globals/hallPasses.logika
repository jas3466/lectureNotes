//Tues Dec 6

//SYMEXE MODE

import org.sireum.logika._

//returns a count of the trues in the sequence
l"""{
    //pos starts at the sequence size
    //every time, subtract one
    fact
        def sumPasses(list: BS, pos: Z): Z
            = 0, if pos == 0        (sum0)
            = 1 + sumPasses(list, pos-1),
                if pos >= 1 ^ list(pos-1)   (sumTrue)
            = sumPasses(list, pos-1),
                if pos >= 1 ^ !list(pos-1)   (sumFalse)
}"""

//what if list: BS(true,false,true)
/*
sumPasses(list, 3) -> ??
*/

//total of 3 hall passes available
val totalPasses: Z = 3

var passesAvailable: Z = totalPasses

//5 students in the class
var passesOut: BS = BS(false,false,false,false,false)

//passesAvailable = 1
//passesOut = BS(true,false,false,false,false)

l"""{
    invariant
        //LIST THE GLOBAL INVARIANTS
        passesAvailable <= totalPasses
        passesAvailable >= 0
        totalPasses == passesAvailable + sumPasses(passesOut, passesOut.size)
        passesOut.size == 5 //size stays same
}"""

def takeHallPass(studentPos: Z): Unit = {
    l"""{
        //WRITE THE FUNCTION CONTRACT
        requires
            studentPos >= 0
            studentPos < passesOut.size
            passesAvailable > 0
            passesOut(studentPos) == false
        modifies passesAvailable, passesOut
        ensures
            passesOut(studentPos) == true
            passesAvailable == passesAvailable_in - 1
            //all other array spots aren't changed
            A x: (0..<passesOut.size) (x != studentPos) -> passesOut(x) == passesOut_in(x)
            //passesOut size is the same
            passesOut.size == 5
    }"""

    //what could we list as a premise if we were in manual mode?

    //any of the preconditions (requires)
    //any of the global invariants

    passesOut(studentPos) = true
    passesAvailable = passesAvailable - 1

    //what would we need to explicitly prove if we were in manual mode?
    //postconditions
    //global invariants
}

def returnHallPass(studentPos: Z): Unit = {
    l"""{
        //WRITE THE FUNCTION CONTRACT
        requires
            studentPos >= 0
            studentPos < passesOut.size
            passesAvailable < totalPasses
            passesOut(studentPos) == true
        modifies passesAvailable, passesOut
        ensures
            passesOut(studentPos) == false
            passesAvailable == passesAvailable_in + 1
            //all other array spots aren't changed
            A x: (0..<passesOut.size) (x != studentPos) -> passesOut(x) == passesOut_in(x)
            //passesOut size is the same
            passesOut.size == 5
        }"""

    passesOut(studentPos) = false
    passesAvailable = passesAvailable + 1
}


/////// Test code //////////
assert(passesAvailable == 3)

//need to show (or have evidence of) function preconditions
//needs to be evidence of all global invariants

takeHallPass(0)

assert(passesAvailable == 2 & passesOut == BS(true,false,false,false,false))

takeHallPass(1)
takeHallPass(2)

//what can we assert about passesOut and passesAvailable?

//what could we list as a premise if we were in manual mode?


//what if I did takeHallPass(0) again?


takeHallPass(2)

//what can we assert about passesOut and passesAvailable?

takeHallPass(4)

//what can we assert about passesOut and passesAvailable?


//what if I did takeHallPass(1) now?


returnHallPass(2)

//what can we assert about passesOut and passesAvailable?

returnHallPass(0)

//what can we assert about passesOut and passesAvailable?