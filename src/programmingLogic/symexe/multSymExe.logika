//Tues Nov 29

import org.sireum.logika._

l"""{
    fact
        def multDef(m: Z, n: Z): Z
            //anything multiplied by 0 is just 0
            mult0. A x: Z multDef(x, 0) == 0
            multPos. A x: Z (A y: Z y > 0 -> multDef(x, y) == multDef(x, y-1) + x)
}"""


//finding x*y by doing x + x + x + ... + x (y times)
//rewrite with symexe first using current approach
//then use the Logika fact

def mult(x: Z, y: Z): Z = {
    l"""{
        requires y >= 0 //(precondition) because that's the number of times I'm stepping
        ensures result == multDef(x, y)   //postcondition
    }"""

    var total: Z = 0
    var i: Z = 0

    //show the invariant is true before the loop begins

    while (i < y) {
        l"""{
            invariant total == multDef(x, i)
                i <= y
                i >= 0
            modifies i,total
        }"""

        //we can list the invariant(s) as premises

        total = total + x

        i = i + 1

        //we must prove invariant(s) still true here
    }

    return total
}

//////////// test code /////////

val a: Z = 5
val b: Z = 4

//call mult to get the product between a and b

var answer: Z = mult(a, b)


//what do we want to assert that it is?
assert(answer == 20)