//Tues Nov 29

import org.sireum.logika._

l"""{
    fact
        def factDef(n: Z): Z
            fOne. factDef(1) == 1
            fBig.  ∀x: Z  x > 1 → factDef(x) == factDef(x - 1) * x
}"""

//want to return n!
//5! = 5 * 4 * 3 * 2 * 1
def factorial(n: Z): Z = {
    //function contract
    l"""{
        requires n >= 1
        ensures result == factDef(n)    //I promise to return n!
    }"""

    var product: Z = 0
    if (n == 1) {
        product = 1

    } else {
        //find (n-1)!
        product = factorial(n-1)

        product = product * n

    }

    return product
}

/////////// Test code //////////////////

val test: Z = 3

val answer: Z = factorial(test)


assert(answer == 6)