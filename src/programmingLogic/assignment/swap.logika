//Thurs Oct 20

import org.sireum.logika._

var x: Z = readInt() // x = 3
var y: Z = readInt() // y = 4

//save out the original values
val xOrig: Z = x    //xOrig = 3
val yOrig: Z = y    //yOrig = 4

//want to swap x and y
x = x + y   //x = 7

l"""{
    1. x == x_old + y               premise //from the variable assignment
    2. xOrig == x_old               premise //from the xOrig = x assignment
    3. yOrig == y                   premise //from the yOrig = y assignment
    4. x == xOrig + y               subst2 2 1
}"""

y = x - y   //y = 3

l"""{
    1. y == x - y_old               premise //from the variable assignment
    2. yOrig == y_old               premise //from the yOrig == y in the previous block
    3. x == xOrig + y_old           premise //from the x == xOrig + y in the previous block
    4. y == xOrig                   algebra 1 3
    5. x == xOrig + yOrig           algebra 2 3
    //want: y == xOrig
}"""

x = x - y   //x = 4

l"""{
    1. x == x_old - y               premise
    2. y == xOrig                   premise
    3. x_old == xOrig + yOrig       premise
    4. x == yOrig                   algebra 1 2 3
    5. y == xOrig ^ x == yOrig      ^i 2 4
    //want: x == yOrig
}"""

//what do we want to claim we did?
assert(y == xOrig & x == yOrig)