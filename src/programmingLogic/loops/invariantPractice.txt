//Tues Nov 15

Practicing loop invariants.


l"""{
    fact
        def pow3(n: Z): Z
            pow0. pow3(0) == 1
            powN. A x: Z x > 0 -> pow3(x) == 3 * pow3(x - 1)
}"""

var x: Z = 1
var i: Z = 0
while (i < n) {
    x = x * 3
    i = i + 1
}

1) What is the code doing? Walk through variable updates.

x = 1   3   9
i = 0   1   2

x is getting multiplied by 3 each time

at any point, x = 3^i

invariants:
x == pow3(i)
i <= n
i >= 0

2) How can we describe the progress at a particular point?



3) Bound the loop counter
    (only sometimes needed, but never hurts)

when my loop finishes, we want:
    x == pow3(n)

we need i == n at the end of the loop

we know: !(i < n) (i >= n), x == pow3(i), i <= n

////////////////////////////////

var x: Z = n
var d: Z = 0
while (x >= a) {
    x = x - a
    d = d + 1
}

1) What is the code doing? Walk through variable updates.

Suppose n is 20 and a is 3.

x = 20  17  14  11  8   5   2
d = 0   1   2   3   4   5   6

x = n   n-a     n-2a
d = 0   1       2

x == n - d*a

What about a general n and a?

2) How can we describe the progress at a particular point?



3) Bound the loop counter



//////////////////////////////////////

//this is not a Logika program, but the idea remains

//nums is an int array

int x = 0;

for (int i = 0; i < nums.Length; i++) {
    nums[i] = x;
    x = x + 2;
}

nums: {0, 2, 4, }

1) What is the code doing? Walk through variable updates.

2) How can we describe the progress at a particular point?

part of the array that we've changed
    at any point, indices from 0 to i-1 are:
        nums[i] = i*2
    indices from i on: nums[index] = nums_orig[index]

part of the array that hasn't changed



3) Bound the loop counter