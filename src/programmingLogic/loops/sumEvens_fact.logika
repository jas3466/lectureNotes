//Thurs Nov 10

import org.sireum.logika._

l"""{
    fact
        def evenDef(n: Z): Z
            sumFirst. evenDef(0) == 0
            sumRest. A x: Z x > 0 -> evenDef(x) == evenDef(x-1) + 2*(x)
}"""

//returns the sum of the first n even numbers
//sumEvens(0) = 0
//sumEvens(1) = 2
//sumEvens(2) = 2 + 4 = 6
//sumEvens(3) = 2 + 4 + 6 = 12
//sumEvens(4) = 2 + 4 + 6 + 8 = 20
//do you see a pattern?
def sumEvens(n: Z): Z = {
    //what do we need to require?
    //what should we ensure?

    var sum: Z = 0
    var count: Z = 0
    var even: Z = 0

    while (count != n) {
        //add invariant block
        //how does sum relate to count? what have we added so far?
        //what is even? how does it relate to count?

        even = even + 2
        sum = sum + even
        count = count + 1
    }

    return sum
}

/////////// Test code ////////////////

var num: Z = 2

var test: Z = sumEvens(num)

//what do we want to assert?
assert(test == 6)