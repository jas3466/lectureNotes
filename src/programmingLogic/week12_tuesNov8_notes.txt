HW 11 due Thursday, November 10

Exam 3 will be Thursday, November 17

/////////////////////////////////

Today:

- Logika facts (create our own proof rules with recursive definition)
- Verifying programs with loops
- Loop invariants

/////////////////////////////////

See our factorial recursive function
(factorial_recursive.logika)

--> How would we write the function contract?
--> How would we specify what we are trying to return?





/////////////////////////////////

Answer: Logika facts

- allow us to create our own proof rules for these ... values
- similar to a recursive definition in math


Recursive definition of factorial:

n! =
    1, if n = 1
    n * (n-1)!, if n > 1


3! = 3 * 2! = 3 * 2 * 1! = 3 * 2 * 1


Here is the equivalent Logika fact for this definition:

l"""{
    fact
        def factDef(n: Z): Z
            fOne. factDef(1) == 1
            fBig.  ∀x: Z  x > 1 → factDef(x) == factDef(x - 1) * x
}"""


Example: what is factDef(3)?


--> we can now use "factDef(n)" in our function contracts
    would mean n!

--> we can also do:

l"""{
    1. factDef(1) == 1                                      fact fOne
    2. ∀x: Z  x > 1 → factDef(x) == factDef(x - 1) * x      fact fBig
}"""

/////////////////////////////////

Revisit factorial example.

--> Add Logika fact

--> Write function contract

--> Do verification

/////////////////////////////////

Validating loops.

while (condition) {
    statements
}


We want to be able to make claims about our program after loop
is done
    ...but we don't know how many times it will execute
    ...or even IF it will execute

//////////////////////////////

Solution: kind of like mathematical induction

Come up with a loop INVARIANT that summarizes the behavior
in a loop

invariant should be true when loop begins
should be STILL true at the end of each iteration

1) Prove the invariant is true before the loop begins

    (what is this like in mathematical induction?)
    base case



2) Assume the invariant is true at the beginning of an iteration.
    Prove the invariant still holds at the end of the iteration.

    (what is this like in mathematical induction?)
    inductive step

/////////////////////////

When loop ends, you know two things:
    1) About the invariant? it is true

    2) About the loop condition? it is false


If your loop is in a function, you can use those two pieces
to prove the postcondition of the function.

(And if you can't, you need to make your invariant stronger.)

/////////////////////////

Loop invariant block: just inside the loop

while (condition) {
    l"""{
        invariant (list the invariant[s])
        modifies (list all variables modified in the loop)
    }"""

    code for the loop
}


/////////////////////////

Example: see code for multiplication with repeated additional using a loop
(mult_loop.logika)

--> should the function contract be different than our recursive implementation?

--> should the test cases/asserts be different?

///////////////////////

Mult - write the loop invariant block.

What do we need to show?

Finish the verification.

/////////////////////// <------ stopped here

(will do rest on Thurs Nov 10)

Another loop example: adding even numbers

sumEvens_loop.logika

///////////////////////

Next time:
- more with verifying loops
- writing loop invariants
- loops and Logika facts