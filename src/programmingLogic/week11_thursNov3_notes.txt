HW 10 due tonight

HW 11 will be posted after class

/////////////////////////////////

Today:
- if-statements in functions
- recursive functions

////////////////////////////////

Reminder: function contracts

l"""{
    requires (preconditions)
    ensures (postconditions)
}"""

preconditions:
    - anything the function needs to assume
    - parameters (any restrictions on the range of parameters)

postconditions:
    - promises from the function about what it will do / return
    - result (use as a keyword for whatever is being returned)
    - might make a promise about range of result (range of returned value)
    - often, something like:
        result == (an expression involving the parameters)

//////////////////////////

Four steps:

1) What should be done before calling the function?

- you must show that whatever you are passing as parameters satisfy
that function's preconditions

2) What can the function itself do with the preconditions?

- the function can list the preconditions as premises

3) What must the function do with the postconditions?

- before returning, function must prove ALL postcondition

if a postcondition is: result > 0

and we have:

return answer

we must prove:

answer > 0

4) What can the calling code do with the postcondition after
    the function returns?

    x = function(param)

- use any postconditions of that function as premises

maybe a postcondition is: result > 0

x > 0

/////////////////////////////////

Example: put our abs code in a function (absFn.logika)



/////////////////////////////////


Recursive functions

- exactly the same idea

 --> recursive call should go on its own line, like:
        total = recursiveCall(params)

    NOT combined with an expression:
        total = total + recursiveCall(params)


    Must do something like this instead:
        temp = recursiveCall(params)
        total = total + temp


Before making a recursive call:
    must prove the preconditions

After returning from the recursive call:
    you can list the postconditions as premises

/////////////////////////////////

Example (mult_recursive.logika):

- write the function header, test code

- write the function contract

- write recursive mult function (mult_recursive.logika)



- how would we verify it?

/////////////////////////////// --> stopped here

(will do rest on Tues Nov 9)


SumOdds example (sumOdds_recursive.logika)

Want to get sum of first n odd numbers



First 2 odd numbers?


First 5 odd numbers?



--> How do we find the nth odd number, starting with 1?
    (Hint: 2*n is the nth even number)



- write the code

- write the function contract

- verify it (with some test code)

/////////////////////////////

Next:
Logika facts (create recursive definitions to use in postconditions)
Start verifying loops

--> on HW 11, problem 4 uses a Logika fact and problem 5 has a loop
--> we will cover those topics on Tuesday, but you have seen everything
    for problems 1-3