HW 9 due tonight
    Problems 4 and 5 involve writing a Logika program.
    Add to top of file:

    import org.sireum.logika._

Will post HW 10 after class (is over verifying conditional statements)

////////////////

Today:
- more with conditional statements
- nested conditional statements

////////////////

Reminder:


some previous claim

if (condition) {
    //what can I list as a premise here?

    l"""{
        1. condition                premise
        2. some previous claim      premise
    }"""


} else {
    //what can I list as a premise here?

    l"""{
        1. !(condition)             premise
        2. some previous claim      premise
    }"""

}

l"""{
    1. claim            premise //"claim" would need to be in if and else logic blocks
    2. first V second   premise //"first" must be claim from if, "second"
                                //must be claim from "else"
}"""

/////////////////

Proving an invariant in a program with conditionals (condInvariant.logika)

What is an invariant?
    statement that remains true after each atomic unit of work

- show the invariant is true BEFORE the conditional
- show the invariant is still true AFTER the conditional

See example (condInvariant.logika)
    --> this is similar to what we will do to prove
        the correctness of loops

////////////////////////////

(isEven.logika)

check whether an input number is even

boolean type (B)

/////////////////////////

Absolute value (abs.logika)

First, write assert
Next, write code
Finally, do verification

////////////////////////

--> will do this example next Tuesday, November 1

Max of 3 (maxOfThree_code.logika and maxOfThree_logic.logika)

Look at code

How to verify nested conditionals?

How to assert we have the biggest of 3?

Finish the verification

//////////////////////

Next: verifying programs with functions