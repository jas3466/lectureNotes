//Tues Nov 1

import org.sireum.logika._

    //adult tickets: $50
    //kid tickets: $30
def getTicketCosts(adult: Z, kid: Z): Z = {
    //function contract
    l"""{
        requires adult >= 0
            kid >= 0
        ensures result == adult*50 + kid*30
            result >= 0
    }"""

    //want to return the total ticket cost
    val overall: Z = adult*50 + kid*30

    l"""{
        1. overall == adult*50 + kid*30             premise //from assignment
                                                        //satisfies 1st postcondition
        2. adult >= 0                               premise //1st precondition
        3. kid >= 0                                 premise //2nd precondition
        4. overall >= 0                             algebra 1 2 3
                                                        //satisfies 2nd postcondition
    }"""

    return overall
}

////////////// Test code /////////////////

val k: Z = 3
val a: Z = 2

//need to prove the preconditions before calling function
l"""{
    1. k == 3                       premise //from assignment
    2. a == 2                       premise //from assignment
    3. a >= 0                       algebra 2 //satisfies 1st precondition
    4. k >= 0                       algebra 1   //satisfies 2nd precondition
}"""

//what goes here?
val cost: Z = getTicketCosts(a, k)

//what goes here?
l"""{
    1. cost == a*50 + k*30          premise //from 1st postcondition
    2. cost >= 0                    premise //from 2nd postcondition
    3. k == 3                       premise
    4. a == 2                       premise
    5. cost == 190                  algebra 1 3 4 //to show the assert
}"""

//what *should* cost be?
assert(cost == 190)